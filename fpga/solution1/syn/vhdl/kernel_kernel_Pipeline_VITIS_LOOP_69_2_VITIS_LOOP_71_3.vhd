-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_kernel_Pipeline_VITIS_LOOP_69_2_VITIS_LOOP_71_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    v : IN STD_LOGIC_VECTOR (63 downto 0);
    vp_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    vp_ce0 : OUT STD_LOGIC;
    vp_we0 : OUT STD_LOGIC;
    vp_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    e_2_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    e_2_out_ap_vld : OUT STD_LOGIC;
    grp_fu_685_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_685_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_685_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_685_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_685_p_ce : OUT STD_LOGIC;
    grp_fu_267_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_267_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_267_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_267_p_ce : OUT STD_LOGIC );
end;


architecture behav of kernel_kernel_Pipeline_VITIS_LOOP_69_2_VITIS_LOOP_71_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv64_BFD0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1011111111010000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_C4 : STD_LOGIC_VECTOR (7 downto 0) := "11000100";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_F0 : STD_LOGIC_VECTOR (7 downto 0) := "11110000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal icmp_ln69_reg_744 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_state10_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state15_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_state20_pp0_stage4_iter3 : BOOLEAN;
    signal ap_block_state25_pp0_stage4_iter4 : BOOLEAN;
    signal ap_block_state30_pp0_stage4_iter5 : BOOLEAN;
    signal ap_block_state35_pp0_stage4_iter6 : BOOLEAN;
    signal ap_block_state40_pp0_stage4_iter7 : BOOLEAN;
    signal ap_block_state45_pp0_stage4_iter8 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage4 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal f_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal f_ce0 : STD_LOGIC;
    signal f_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal gmem0_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state41_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state46_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln69_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_744_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_744_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_744_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_744_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_744_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_744_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_744_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_744_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln69_1_fu_295_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln69_1_reg_748 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln69_3_fu_323_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln69_3_reg_753 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln75_1_fu_383_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_1_reg_759 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_1_reg_759_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_1_reg_759_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_1_reg_759_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_1_reg_759_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_1_reg_759_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_1_reg_759_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_1_reg_759_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln5_reg_769 : STD_LOGIC_VECTOR (60 downto 0);
    signal f_load_reg_774 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state17_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state22_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state27_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state32_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state37_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state42_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state47_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal f_load_reg_774_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal f_load_reg_774_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal f_load_reg_774_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal f_load_reg_774_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal f_load_reg_774_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln6_reg_785 : STD_LOGIC_VECTOR (60 downto 0);
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state14_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_state19_pp0_stage3_iter3 : BOOLEAN;
    signal ap_block_state24_pp0_stage3_iter4 : BOOLEAN;
    signal ap_block_state29_pp0_stage3_iter5 : BOOLEAN;
    signal ap_block_state34_pp0_stage3_iter6 : BOOLEAN;
    signal ap_block_state39_pp0_stage3_iter7 : BOOLEAN;
    signal ap_block_state44_pp0_stage3_iter8 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal tmp_6_reg_790 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal trunc_ln77_1_reg_801 : STD_LOGIC_VECTOR (60 downto 0);
    signal gmem0_addr_1_read_reg_812 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_1_read_1_reg_817 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_1_read_1_reg_817_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_1_read_1_reg_817_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_1_read_1_reg_817_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_1_read_1_reg_817_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_1_read_1_reg_817_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_1_read_1_reg_817_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_1_read_2_reg_822 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln76_fu_559_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state18_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state23_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_state28_pp0_stage2_iter5 : BOOLEAN;
    signal ap_block_state33_pp0_stage2_iter6 : BOOLEAN;
    signal ap_block_state38_pp0_stage2_iter7 : BOOLEAN;
    signal ap_block_state43_pp0_stage2_iter8 : BOOLEAN;
    signal ap_block_state48_pp0_stage2_iter9 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal bitcast_ln76_2_fu_563_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_2_read_reg_837 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_2_read_reg_837_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_3_read_reg_842 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_3_read_reg_842_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_addr_3_read_reg_842_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal add_reg_847 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln77_fu_567_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add1_reg_857 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln77_1_fu_571_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add2_reg_867 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_reg_872 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_reg_877 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln76_1_fu_575_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal dc_reg_888 : STD_LOGIC_VECTOR (63 downto 0);
    signal e_load_1_reg_893 : STD_LOGIC_VECTOR (63 downto 0);
    signal d_fu_602_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal d_reg_900 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln80_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_906 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_1_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_1_reg_911 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal sext_ln76_fu_435_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln77_fu_512_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln77_1_fu_549_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal e_fu_112 : STD_LOGIC_VECTOR (63 downto 0);
    signal e_2_fu_680_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal iy_fu_116 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln77_fu_398_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_iy_load : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln75_fu_120 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln71_fu_404_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_phi_ln75_load : STD_LOGIC_VECTOR (3 downto 0);
    signal ix_fu_124 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_ix_load : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln71_fu_128 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln69_2_fu_309_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_phi_ln71_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten52_fu_132 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln69_fu_263_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_indvar_flatten52_load : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage2_01001 : BOOLEAN;
    signal grp_fu_211_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_211_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_220_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln71_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln69_1_fu_303_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln69_2_fu_317_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln69_fu_287_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_331_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_fu_339_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_345_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln75_1_fu_355_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln75_fu_365_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln75_2_fu_375_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_1_fu_369_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln77_2_fu_445_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln77_1_fu_452_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_458_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln1_fu_468_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln77_fu_477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln77_2_fu_481_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln77_3_fu_496_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln77_1_fu_522_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln77_1_fu_530_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln77_4_fu_534_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_fu_583_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln508_fu_586_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal t_fu_594_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_607_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln80_fu_590_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal bitcast_ln80_fu_629_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_632_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln80_1_fu_642_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln80_3_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_2_fu_650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln80_fu_646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln80_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln80_1_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln80_1_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_211_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage2_00001 : BOOLEAN;
    signal ap_block_pp0_stage3_00001 : BOOLEAN;
    signal ap_block_pp0_stage4_00001 : BOOLEAN;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal grp_fu_211_ce : STD_LOGIC;
    signal grp_fu_215_ce : STD_LOGIC;
    signal grp_fu_220_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter8_stage2 : STD_LOGIC;
    signal ap_idle_pp0_0to7 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to9 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component kernel_dadddsub_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kernel_dmul_64ns_64ns_64_5_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kernel_dcmp_64ns_64ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component kernel_kernel_Pipeline_VITIS_LOOP_69_2_VITIS_LOOP_71_3_f_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kernel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    f_U : component kernel_kernel_Pipeline_VITIS_LOOP_69_2_VITIS_LOOP_71_3_f_ROM_AUTO_1R
    generic map (
        DataWidth => 64,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_address0,
        ce0 => f_ce0,
        q0 => f_q0);

    dcmp_64ns_64ns_1_2_no_dsp_1_U5 : component kernel_dcmp_64ns_64ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_220_p0,
        din1 => e_fu_112,
        ce => grp_fu_220_ce,
        opcode => ap_const_lv5_2,
        dout => grp_fu_220_p2);

    flow_control_loop_pipe_sequential_init_U : component kernel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage4,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage4)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to7 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter8_stage2))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to7 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter8_stage2))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to7 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter8_stage2))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to7 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter8_stage2))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to7 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter8_stage2))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter6_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to7 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter8_stage2))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter7_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to7 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter8_stage2))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter8_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to7 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter8_stage2))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
            end if; 
        end if;
    end process;

    e_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                e_fu_112 <= ap_const_lv64_0;
            elsif (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                e_fu_112 <= e_2_fu_680_p3;
            end if; 
        end if;
    end process;

    indvar_flatten52_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((icmp_ln69_fu_257_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten52_fu_132 <= add_ln69_fu_263_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten52_fu_132 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    ix_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((icmp_ln69_fu_257_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    ix_fu_124 <= select_ln69_3_fu_323_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    ix_fu_124 <= ap_const_lv4_1;
                end if;
            end if; 
        end if;
    end process;

    iy_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((icmp_ln69_fu_257_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    iy_fu_116 <= add_ln77_fu_398_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    iy_fu_116 <= ap_const_lv4_1;
                end if;
            end if; 
        end if;
    end process;

    phi_ln71_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((icmp_ln69_fu_257_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    phi_ln71_fu_128 <= select_ln69_2_fu_309_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    phi_ln71_fu_128 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    phi_ln75_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((icmp_ln69_fu_257_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    phi_ln75_fu_120 <= add_ln71_fu_404_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    phi_ln75_fu_120 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                add1_reg_857 <= grp_fu_685_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                add2_reg_867 <= grp_fu_685_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_reg_847 <= grp_fu_685_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                    d_reg_900(62 downto 0) <= d_fu_602_p1(62 downto 0);
                e_load_1_reg_893 <= e_fu_112;
                f_load_reg_774_pp0_iter1_reg <= f_load_reg_774;
                f_load_reg_774_pp0_iter2_reg <= f_load_reg_774_pp0_iter1_reg;
                f_load_reg_774_pp0_iter3_reg <= f_load_reg_774_pp0_iter2_reg;
                f_load_reg_774_pp0_iter4_reg <= f_load_reg_774_pp0_iter3_reg;
                f_load_reg_774_pp0_iter5_reg <= f_load_reg_774_pp0_iter4_reg;
                icmp_ln80_1_reg_911 <= icmp_ln80_1_fu_623_p2;
                icmp_ln80_reg_906 <= icmp_ln80_fu_617_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                dc_reg_888 <= grp_fu_685_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln69_reg_744 = ap_const_lv1_0))) then
                f_load_reg_774 <= f_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem0_addr_1_read_1_reg_817 <= m_axi_gmem0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem0_addr_1_read_1_reg_817_pp0_iter3_reg <= gmem0_addr_1_read_1_reg_817;
                gmem0_addr_1_read_1_reg_817_pp0_iter4_reg <= gmem0_addr_1_read_1_reg_817_pp0_iter3_reg;
                gmem0_addr_1_read_1_reg_817_pp0_iter5_reg <= gmem0_addr_1_read_1_reg_817_pp0_iter4_reg;
                gmem0_addr_1_read_1_reg_817_pp0_iter6_reg <= gmem0_addr_1_read_1_reg_817_pp0_iter5_reg;
                gmem0_addr_1_read_1_reg_817_pp0_iter7_reg <= gmem0_addr_1_read_1_reg_817_pp0_iter6_reg;
                gmem0_addr_1_read_1_reg_817_pp0_iter8_reg <= gmem0_addr_1_read_1_reg_817_pp0_iter7_reg;
                icmp_ln69_reg_744 <= icmp_ln69_fu_257_p2;
                icmp_ln69_reg_744_pp0_iter1_reg <= icmp_ln69_reg_744;
                icmp_ln69_reg_744_pp0_iter2_reg <= icmp_ln69_reg_744_pp0_iter1_reg;
                icmp_ln69_reg_744_pp0_iter3_reg <= icmp_ln69_reg_744_pp0_iter2_reg;
                icmp_ln69_reg_744_pp0_iter4_reg <= icmp_ln69_reg_744_pp0_iter3_reg;
                icmp_ln69_reg_744_pp0_iter5_reg <= icmp_ln69_reg_744_pp0_iter4_reg;
                icmp_ln69_reg_744_pp0_iter6_reg <= icmp_ln69_reg_744_pp0_iter5_reg;
                icmp_ln69_reg_744_pp0_iter7_reg <= icmp_ln69_reg_744_pp0_iter6_reg;
                icmp_ln69_reg_744_pp0_iter8_reg <= icmp_ln69_reg_744_pp0_iter7_reg;
                    zext_ln75_1_reg_759_pp0_iter1_reg(7 downto 0) <= zext_ln75_1_reg_759(7 downto 0);
                    zext_ln75_1_reg_759_pp0_iter2_reg(7 downto 0) <= zext_ln75_1_reg_759_pp0_iter1_reg(7 downto 0);
                    zext_ln75_1_reg_759_pp0_iter3_reg(7 downto 0) <= zext_ln75_1_reg_759_pp0_iter2_reg(7 downto 0);
                    zext_ln75_1_reg_759_pp0_iter4_reg(7 downto 0) <= zext_ln75_1_reg_759_pp0_iter3_reg(7 downto 0);
                    zext_ln75_1_reg_759_pp0_iter5_reg(7 downto 0) <= zext_ln75_1_reg_759_pp0_iter4_reg(7 downto 0);
                    zext_ln75_1_reg_759_pp0_iter6_reg(7 downto 0) <= zext_ln75_1_reg_759_pp0_iter5_reg(7 downto 0);
                    zext_ln75_1_reg_759_pp0_iter7_reg(7 downto 0) <= zext_ln75_1_reg_759_pp0_iter6_reg(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                gmem0_addr_1_read_2_reg_822 <= m_axi_gmem0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                gmem0_addr_1_read_reg_812 <= m_axi_gmem0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                gmem0_addr_2_read_reg_837 <= m_axi_gmem0_RDATA;
                gmem0_addr_2_read_reg_837_pp0_iter3_reg <= gmem0_addr_2_read_reg_837;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                gmem0_addr_3_read_reg_842 <= m_axi_gmem0_RDATA;
                gmem0_addr_3_read_reg_842_pp0_iter3_reg <= gmem0_addr_3_read_reg_842;
                gmem0_addr_3_read_reg_842_pp0_iter4_reg <= gmem0_addr_3_read_reg_842_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                mul_reg_877 <= grp_fu_267_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln69_fu_257_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln69_1_reg_748 <= select_ln69_1_fu_295_p3;
                select_ln69_3_reg_753 <= select_ln69_3_fu_323_p3;
                trunc_ln5_reg_769 <= add_ln75_1_fu_369_p2(63 downto 3);
                    zext_ln75_1_reg_759(7 downto 0) <= zext_ln75_1_fu_383_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                sub_reg_872 <= grp_fu_685_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln69_reg_744 = ap_const_lv1_0))) then
                tmp_6_reg_790 <= add_ln77_3_fu_496_p2(7 downto 4);
                trunc_ln6_reg_785 <= add_ln77_2_fu_481_p2(63 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (icmp_ln69_reg_744 = ap_const_lv1_0))) then
                trunc_ln77_1_reg_801 <= add_ln77_4_fu_534_p2(63 downto 3);
            end if;
        end if;
    end process;
    zext_ln75_1_reg_759(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln75_1_reg_759_pp0_iter1_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln75_1_reg_759_pp0_iter2_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln75_1_reg_759_pp0_iter3_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln75_1_reg_759_pp0_iter4_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln75_1_reg_759_pp0_iter5_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln75_1_reg_759_pp0_iter6_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln75_1_reg_759_pp0_iter7_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    d_reg_900(63) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage4_subdone, ap_block_pp0_stage2_subdone, ap_condition_exit_pp0_iter8_stage2, ap_idle_pp0_0to7, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to9, ap_block_pp0_stage1_subdone, ap_block_pp0_stage3_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to9 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if (((ap_idle_pp0_0to7 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter8_stage2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln69_1_fu_303_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_phi_ln71_load) + unsigned(ap_const_lv4_1));
    add_ln69_2_fu_317_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_ix_load) + unsigned(ap_const_lv4_1));
    add_ln69_fu_263_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten52_load) + unsigned(ap_const_lv8_1));
    add_ln71_fu_404_p2 <= std_logic_vector(unsigned(select_ln69_fu_287_p3) + unsigned(ap_const_lv4_1));
    add_ln75_1_fu_369_p2 <= std_logic_vector(unsigned(zext_ln75_fu_365_p1) + unsigned(v));
    add_ln75_2_fu_375_p3 <= (select_ln69_1_fu_295_p3 & select_ln69_3_fu_323_p3);
    add_ln75_fu_339_p2 <= std_logic_vector(unsigned(shl_ln_fu_331_p3) + unsigned(ap_const_lv8_10));
    add_ln77_1_fu_452_p2 <= std_logic_vector(unsigned(shl_ln77_2_fu_445_p3) + unsigned(ap_const_lv8_10));
    add_ln77_2_fu_481_p2 <= std_logic_vector(unsigned(zext_ln77_fu_477_p1) + unsigned(v));
    add_ln77_3_fu_496_p2 <= std_logic_vector(unsigned(shl_ln77_2_fu_445_p3) + unsigned(ap_const_lv8_F0));
    add_ln77_4_fu_534_p2 <= std_logic_vector(unsigned(zext_ln77_1_fu_530_p1) + unsigned(v));
    add_ln77_fu_398_p2 <= std_logic_vector(unsigned(select_ln69_1_fu_295_p3) + unsigned(ap_const_lv4_1));
    and_ln80_1_fu_674_p2 <= (or_ln80_1_fu_662_p2 and and_ln80_fu_668_p2);
    and_ln80_fu_668_p2 <= (or_ln80_fu_646_p2 and grp_fu_220_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_00001_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_gmem0_RVALID)
    begin
                ap_block_pp0_stage0_00001 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (m_axi_gmem0_RVALID = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, m_axi_gmem0_ARREADY, m_axi_gmem0_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (m_axi_gmem0_RVALID = ap_const_logic_0)) or ((m_axi_gmem0_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, m_axi_gmem0_ARREADY, m_axi_gmem0_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (m_axi_gmem0_RVALID = ap_const_logic_0)) or ((m_axi_gmem0_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_00001_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_gmem0_RVALID)
    begin
                ap_block_pp0_stage1_00001 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (m_axi_gmem0_RVALID = ap_const_logic_0));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, m_axi_gmem0_RVALID, ap_block_state2_io)
    begin
                ap_block_pp0_stage1_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (m_axi_gmem0_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, m_axi_gmem0_RVALID, ap_block_state2_io)
    begin
                ap_block_pp0_stage1_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (m_axi_gmem0_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_00001_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_gmem0_RVALID)
    begin
                ap_block_pp0_stage2_00001 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (m_axi_gmem0_RVALID = ap_const_logic_0));
    end process;


    ap_block_pp0_stage2_01001_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_gmem0_RVALID)
    begin
                ap_block_pp0_stage2_01001 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (m_axi_gmem0_RVALID = ap_const_logic_0));
    end process;


    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_gmem0_RVALID)
    begin
                ap_block_pp0_stage2_11001 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (m_axi_gmem0_RVALID = ap_const_logic_0));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_gmem0_RVALID)
    begin
                ap_block_pp0_stage2_subdone <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (m_axi_gmem0_RVALID = ap_const_logic_0));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_00001_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_gmem0_RVALID)
    begin
                ap_block_pp0_stage3_00001 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (m_axi_gmem0_RVALID = ap_const_logic_0));
    end process;


    ap_block_pp0_stage3_11001_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_gmem0_RVALID)
    begin
                ap_block_pp0_stage3_11001 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (m_axi_gmem0_RVALID = ap_const_logic_0));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_gmem0_RVALID)
    begin
                ap_block_pp0_stage3_subdone <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (m_axi_gmem0_RVALID = ap_const_logic_0));
    end process;

        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_00001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem0_RVALID)
    begin
                ap_block_pp0_stage4_00001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (m_axi_gmem0_RVALID = ap_const_logic_0));
    end process;


    ap_block_pp0_stage4_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, m_axi_gmem0_RVALID, ap_block_state5_io)
    begin
                ap_block_pp0_stage4_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (m_axi_gmem0_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io)));
    end process;


    ap_block_pp0_stage4_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, m_axi_gmem0_RVALID, ap_block_state5_io)
    begin
                ap_block_pp0_stage4_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (m_axi_gmem0_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io)));
    end process;


    ap_block_state10_pp0_stage4_iter1_assign_proc : process(m_axi_gmem0_RVALID)
    begin
                ap_block_state10_pp0_stage4_iter1 <= (m_axi_gmem0_RVALID = ap_const_logic_0);
    end process;


    ap_block_state11_pp0_stage0_iter2_assign_proc : process(m_axi_gmem0_RVALID)
    begin
                ap_block_state11_pp0_stage0_iter2 <= (m_axi_gmem0_RVALID = ap_const_logic_0);
    end process;


    ap_block_state12_pp0_stage1_iter2_assign_proc : process(m_axi_gmem0_RVALID)
    begin
                ap_block_state12_pp0_stage1_iter2 <= (m_axi_gmem0_RVALID = ap_const_logic_0);
    end process;


    ap_block_state13_pp0_stage2_iter2_assign_proc : process(m_axi_gmem0_RVALID)
    begin
                ap_block_state13_pp0_stage2_iter2 <= (m_axi_gmem0_RVALID = ap_const_logic_0);
    end process;


    ap_block_state14_pp0_stage3_iter2_assign_proc : process(m_axi_gmem0_RVALID)
    begin
                ap_block_state14_pp0_stage3_iter2 <= (m_axi_gmem0_RVALID = ap_const_logic_0);
    end process;

        ap_block_state15_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage4_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage3_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage4_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage3_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_io_assign_proc : process(m_axi_gmem0_ARREADY, icmp_ln69_reg_744)
    begin
                ap_block_state2_io <= ((m_axi_gmem0_ARREADY = ap_const_logic_0) and (icmp_ln69_reg_744 = ap_const_lv1_0));
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage4_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage2_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage3_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage4_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage2_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage3_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage4_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage2_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage3_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage4_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage2_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(m_axi_gmem0_ARREADY, icmp_ln69_reg_744)
    begin
                ap_block_state5_io <= ((m_axi_gmem0_ARREADY = ap_const_logic_0) and (icmp_ln69_reg_744 = ap_const_lv1_0));
    end process;

        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage4_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, icmp_ln69_reg_744, ap_block_pp0_stage4_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (icmp_ln69_reg_744 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter0_stage4 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter8_stage2_assign_proc : process(ap_enable_reg_pp0_iter8, ap_CS_fsm_pp0_stage2, icmp_ln69_reg_744_pp0_iter8_reg, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (icmp_ln69_reg_744_pp0_iter8_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
            ap_condition_exit_pp0_iter8_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter8_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to7_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to7 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to9_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to9 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to9 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage4;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten52_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten52_fu_132)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten52_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_indvar_flatten52_load <= indvar_flatten52_fu_132;
        end if; 
    end process;


    ap_sig_allocacmp_ix_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, ix_fu_124)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_ix_load <= ap_const_lv4_1;
        else 
            ap_sig_allocacmp_ix_load <= ix_fu_124;
        end if; 
    end process;


    ap_sig_allocacmp_iy_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, iy_fu_116)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_iy_load <= ap_const_lv4_1;
        else 
            ap_sig_allocacmp_iy_load <= iy_fu_116;
        end if; 
    end process;


    ap_sig_allocacmp_phi_ln71_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, phi_ln71_fu_128)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_phi_ln71_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_phi_ln71_load <= phi_ln71_fu_128;
        end if; 
    end process;


    ap_sig_allocacmp_phi_ln75_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, phi_ln75_fu_120)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_phi_ln75_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_phi_ln75_load <= phi_ln75_fu_120;
        end if; 
    end process;

    bitcast_ln76_1_fu_575_p1 <= gmem0_addr_1_read_1_reg_817_pp0_iter8_reg;
    bitcast_ln76_2_fu_563_p1 <= gmem0_addr_1_read_2_reg_822;
    bitcast_ln76_fu_559_p1 <= gmem0_addr_1_read_reg_812;
    bitcast_ln77_1_fu_571_p1 <= gmem0_addr_3_read_reg_842_pp0_iter4_reg;
    bitcast_ln77_fu_567_p1 <= gmem0_addr_2_read_reg_837_pp0_iter3_reg;
    bitcast_ln80_fu_629_p1 <= e_load_1_reg_893;
    d_fu_602_p1 <= t_fu_594_p3;
    data_fu_583_p1 <= dc_reg_888;
    e_2_fu_680_p3 <= 
        d_reg_900 when (and_ln80_1_fu_674_p2(0) = '1') else 
        e_load_1_reg_893;
    e_2_out <= e_fu_112;

    e_2_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage2, icmp_ln69_reg_744_pp0_iter8_reg, ap_block_pp0_stage2_11001)
    begin
        if (((icmp_ln69_reg_744_pp0_iter8_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
            e_2_out_ap_vld <= ap_const_logic_1;
        else 
            e_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    f_address0 <= zext_ln75_1_fu_383_p1(8 - 1 downto 0);

    f_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            f_ce0 <= ap_const_logic_1;
        else 
            f_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_blk_n_AR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, m_axi_gmem0_ARREADY, icmp_ln69_reg_744, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage4, ap_block_pp0_stage0)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (icmp_ln69_reg_744 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (icmp_ln69_reg_744 = ap_const_lv1_0)))) then 
            gmem0_blk_n_AR <= m_axi_gmem0_ARREADY;
        else 
            gmem0_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem0_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage4, m_axi_gmem0_RVALID, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage4, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4)))) then 
            gmem0_blk_n_R <= m_axi_gmem0_RVALID;
        else 
            gmem0_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_211_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            grp_fu_211_ce <= ap_const_logic_1;
        else 
            grp_fu_211_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_211_opcode_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter8, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage2_00001, ap_block_pp0_stage3_00001, ap_block_pp0_stage4_00001, ap_block_pp0_stage0_00001, ap_block_pp0_stage1_00001)
    begin
        if ((((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_00001)) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_00001)))) then 
            grp_fu_211_opcode <= ap_const_lv2_1;
        elsif ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_00001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_00001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_00001)))) then 
            grp_fu_211_opcode <= ap_const_lv2_0;
        else 
            grp_fu_211_opcode <= "XX";
        end if; 
    end process;


    grp_fu_211_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter8, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage4, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, f_load_reg_774_pp0_iter5_reg, bitcast_ln76_2_fu_563_p1, add_reg_847, add1_reg_857, mul_reg_877)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_211_p0 <= mul_reg_877;
        elsif (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_211_p0 <= f_load_reg_774_pp0_iter5_reg;
        elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
            grp_fu_211_p0 <= add1_reg_857;
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            grp_fu_211_p0 <= add_reg_847;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            grp_fu_211_p0 <= bitcast_ln76_2_fu_563_p1;
        else 
            grp_fu_211_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_211_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter8, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage4, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, bitcast_ln76_fu_559_p1, bitcast_ln77_fu_567_p1, bitcast_ln77_1_fu_571_p1, add2_reg_867, bitcast_ln76_1_fu_575_p1)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_211_p1 <= bitcast_ln76_1_fu_575_p1;
        elsif (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_211_p1 <= add2_reg_867;
        elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4))) then 
            grp_fu_211_p1 <= bitcast_ln77_1_fu_571_p1;
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            grp_fu_211_p1 <= bitcast_ln77_fu_567_p1;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            grp_fu_211_p1 <= bitcast_ln76_fu_559_p1;
        else 
            grp_fu_211_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_215_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            grp_fu_215_ce <= ap_const_logic_1;
        else 
            grp_fu_215_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_220_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            grp_fu_220_ce <= ap_const_logic_1;
        else 
            grp_fu_220_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_220_p0 <= t_fu_594_p3;
    grp_fu_267_p_ce <= grp_fu_215_ce;
    grp_fu_267_p_din0 <= sub_reg_872;
    grp_fu_267_p_din1 <= ap_const_lv64_BFD0000000000000;
    grp_fu_685_p_ce <= grp_fu_211_ce;
    grp_fu_685_p_din0 <= grp_fu_211_p0;
    grp_fu_685_p_din1 <= grp_fu_211_p1;
    grp_fu_685_p_opcode <= grp_fu_211_opcode;
    icmp_ln69_fu_257_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten52_load = ap_const_lv8_C4) else "0";
    icmp_ln71_fu_281_p2 <= "1" when (ap_sig_allocacmp_iy_load = ap_const_lv4_F) else "0";
    icmp_ln80_1_fu_623_p2 <= "1" when (trunc_ln80_fu_590_p1 = ap_const_lv52_0) else "0";
    icmp_ln80_2_fu_650_p2 <= "0" when (tmp_9_fu_632_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln80_3_fu_656_p2 <= "1" when (trunc_ln80_1_fu_642_p1 = ap_const_lv52_0) else "0";
    icmp_ln80_fu_617_p2 <= "0" when (tmp_8_fu_607_p4 = ap_const_lv11_7FF) else "1";

    m_axi_gmem0_ARADDR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, icmp_ln69_reg_744, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage4_11001, sext_ln76_fu_435_p1, sext_ln77_fu_512_p1, sext_ln77_1_fu_549_p1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem0_ARADDR <= sext_ln77_1_fu_549_p1;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (icmp_ln69_reg_744 = ap_const_lv1_0))) then 
            m_axi_gmem0_ARADDR <= sext_ln77_fu_512_p1;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln69_reg_744 = ap_const_lv1_0))) then 
            m_axi_gmem0_ARADDR <= sext_ln76_fu_435_p1;
        else 
            m_axi_gmem0_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem0_ARBURST <= ap_const_lv2_0;
    m_axi_gmem0_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem0_ARID <= ap_const_lv1_0;

    m_axi_gmem0_ARLEN_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, icmp_ln69_reg_744, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (icmp_ln69_reg_744 = ap_const_lv1_0)))) then 
            m_axi_gmem0_ARLEN <= ap_const_lv32_1;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln69_reg_744 = ap_const_lv1_0))) then 
            m_axi_gmem0_ARLEN <= ap_const_lv32_3;
        else 
            m_axi_gmem0_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem0_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem0_ARPROT <= ap_const_lv3_0;
    m_axi_gmem0_ARQOS <= ap_const_lv4_0;
    m_axi_gmem0_ARREGION <= ap_const_lv4_0;
    m_axi_gmem0_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem0_ARUSER <= ap_const_lv1_0;

    m_axi_gmem0_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, icmp_ln69_reg_744, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (icmp_ln69_reg_744 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln69_reg_744 = ap_const_lv1_0)))) then 
            m_axi_gmem0_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_AWADDR <= ap_const_lv64_0;
    m_axi_gmem0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem0_AWID <= ap_const_lv1_0;
    m_axi_gmem0_AWLEN <= ap_const_lv32_0;
    m_axi_gmem0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem0_AWVALID <= ap_const_logic_0;
    m_axi_gmem0_BREADY <= ap_const_logic_0;

    m_axi_gmem0_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)))) then 
            m_axi_gmem0_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem0_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_WDATA <= ap_const_lv64_0;
    m_axi_gmem0_WID <= ap_const_lv1_0;
    m_axi_gmem0_WLAST <= ap_const_logic_0;
    m_axi_gmem0_WSTRB <= ap_const_lv8_0;
    m_axi_gmem0_WUSER <= ap_const_lv1_0;
    m_axi_gmem0_WVALID <= ap_const_logic_0;
    or_ln80_1_fu_662_p2 <= (icmp_ln80_3_fu_656_p2 or icmp_ln80_2_fu_650_p2);
    or_ln80_fu_646_p2 <= (icmp_ln80_reg_906 or icmp_ln80_1_reg_911);
    select_ln69_1_fu_295_p3 <= 
        ap_const_lv4_1 when (icmp_ln71_fu_281_p2(0) = '1') else 
        ap_sig_allocacmp_iy_load;
    select_ln69_2_fu_309_p3 <= 
        add_ln69_1_fu_303_p2 when (icmp_ln71_fu_281_p2(0) = '1') else 
        ap_sig_allocacmp_phi_ln71_load;
    select_ln69_3_fu_323_p3 <= 
        add_ln69_2_fu_317_p2 when (icmp_ln71_fu_281_p2(0) = '1') else 
        ap_sig_allocacmp_ix_load;
    select_ln69_fu_287_p3 <= 
        ap_const_lv4_0 when (icmp_ln71_fu_281_p2(0) = '1') else 
        ap_sig_allocacmp_phi_ln75_load;
        sext_ln76_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln5_reg_769),64));

        sext_ln77_1_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln77_1_reg_801),64));

        sext_ln77_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln6_reg_785),64));

    shl_ln1_fu_468_p4 <= ((tmp_5_fu_458_p4 & select_ln69_3_reg_753) & ap_const_lv3_0);
    shl_ln75_1_fu_355_p4 <= ((tmp_fu_345_p4 & select_ln69_2_fu_309_p3) & ap_const_lv3_0);
    shl_ln77_1_fu_522_p4 <= ((tmp_6_reg_790 & select_ln69_3_reg_753) & ap_const_lv3_0);
    shl_ln77_2_fu_445_p3 <= (select_ln69_1_reg_748 & ap_const_lv4_0);
    shl_ln_fu_331_p3 <= (select_ln69_fu_287_p3 & ap_const_lv4_0);
    t_fu_594_p3 <= (ap_const_lv1_0 & trunc_ln508_fu_586_p1);
    tmp_5_fu_458_p4 <= add_ln77_1_fu_452_p2(7 downto 4);
    tmp_8_fu_607_p4 <= data_fu_583_p1(62 downto 52);
    tmp_9_fu_632_p4 <= bitcast_ln80_fu_629_p1(62 downto 52);
    tmp_fu_345_p4 <= add_ln75_fu_339_p2(7 downto 4);
    trunc_ln508_fu_586_p1 <= data_fu_583_p1(63 - 1 downto 0);
    trunc_ln80_1_fu_642_p1 <= bitcast_ln80_fu_629_p1(52 - 1 downto 0);
    trunc_ln80_fu_590_p1 <= data_fu_583_p1(52 - 1 downto 0);
    vp_address0 <= zext_ln75_1_reg_759_pp0_iter7_reg(8 - 1 downto 0);

    vp_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            vp_ce0 <= ap_const_logic_1;
        else 
            vp_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    vp_d0 <= mul_reg_877;

    vp_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            vp_we0 <= ap_const_logic_1;
        else 
            vp_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln75_1_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_2_fu_375_p3),64));
    zext_ln75_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln75_1_fu_355_p4),64));
    zext_ln77_1_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln77_1_fu_522_p4),64));
    zext_ln77_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_468_p4),64));
end behav;
