// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module kernel_kernel_Pipeline_VITIS_LOOP_69_2_VITIS_LOOP_71_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY,
        m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY,
        m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST,
        m_axi_gmem0_WID,
        m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY,
        m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID,
        m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA,
        m_axi_gmem0_RLAST,
        m_axi_gmem0_RID,
        m_axi_gmem0_RFIFONUM,
        m_axi_gmem0_RUSER,
        m_axi_gmem0_RRESP,
        m_axi_gmem0_BVALID,
        m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP,
        m_axi_gmem0_BID,
        m_axi_gmem0_BUSER,
        v,
        vp_address0,
        vp_ce0,
        vp_we0,
        vp_d0,
        e_2_out,
        e_2_out_ap_vld,
        grp_fu_685_p_din0,
        grp_fu_685_p_din1,
        grp_fu_685_p_opcode,
        grp_fu_685_p_dout0,
        grp_fu_685_p_ce,
        grp_fu_267_p_din0,
        grp_fu_267_p_din1,
        grp_fu_267_p_dout0,
        grp_fu_267_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 5'd1;
parameter    ap_ST_fsm_pp0_stage1 = 5'd2;
parameter    ap_ST_fsm_pp0_stage2 = 5'd4;
parameter    ap_ST_fsm_pp0_stage3 = 5'd8;
parameter    ap_ST_fsm_pp0_stage4 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem0_AWVALID;
input   m_axi_gmem0_AWREADY;
output  [63:0] m_axi_gmem0_AWADDR;
output  [0:0] m_axi_gmem0_AWID;
output  [31:0] m_axi_gmem0_AWLEN;
output  [2:0] m_axi_gmem0_AWSIZE;
output  [1:0] m_axi_gmem0_AWBURST;
output  [1:0] m_axi_gmem0_AWLOCK;
output  [3:0] m_axi_gmem0_AWCACHE;
output  [2:0] m_axi_gmem0_AWPROT;
output  [3:0] m_axi_gmem0_AWQOS;
output  [3:0] m_axi_gmem0_AWREGION;
output  [0:0] m_axi_gmem0_AWUSER;
output   m_axi_gmem0_WVALID;
input   m_axi_gmem0_WREADY;
output  [63:0] m_axi_gmem0_WDATA;
output  [7:0] m_axi_gmem0_WSTRB;
output   m_axi_gmem0_WLAST;
output  [0:0] m_axi_gmem0_WID;
output  [0:0] m_axi_gmem0_WUSER;
output   m_axi_gmem0_ARVALID;
input   m_axi_gmem0_ARREADY;
output  [63:0] m_axi_gmem0_ARADDR;
output  [0:0] m_axi_gmem0_ARID;
output  [31:0] m_axi_gmem0_ARLEN;
output  [2:0] m_axi_gmem0_ARSIZE;
output  [1:0] m_axi_gmem0_ARBURST;
output  [1:0] m_axi_gmem0_ARLOCK;
output  [3:0] m_axi_gmem0_ARCACHE;
output  [2:0] m_axi_gmem0_ARPROT;
output  [3:0] m_axi_gmem0_ARQOS;
output  [3:0] m_axi_gmem0_ARREGION;
output  [0:0] m_axi_gmem0_ARUSER;
input   m_axi_gmem0_RVALID;
output   m_axi_gmem0_RREADY;
input  [63:0] m_axi_gmem0_RDATA;
input   m_axi_gmem0_RLAST;
input  [0:0] m_axi_gmem0_RID;
input  [8:0] m_axi_gmem0_RFIFONUM;
input  [0:0] m_axi_gmem0_RUSER;
input  [1:0] m_axi_gmem0_RRESP;
input   m_axi_gmem0_BVALID;
output   m_axi_gmem0_BREADY;
input  [1:0] m_axi_gmem0_BRESP;
input  [0:0] m_axi_gmem0_BID;
input  [0:0] m_axi_gmem0_BUSER;
input  [63:0] v;
output  [7:0] vp_address0;
output   vp_ce0;
output   vp_we0;
output  [63:0] vp_d0;
output  [63:0] e_2_out;
output   e_2_out_ap_vld;
output  [63:0] grp_fu_685_p_din0;
output  [63:0] grp_fu_685_p_din1;
output  [1:0] grp_fu_685_p_opcode;
input  [63:0] grp_fu_685_p_dout0;
output   grp_fu_685_p_ce;
output  [63:0] grp_fu_267_p_din0;
output  [63:0] grp_fu_267_p_din1;
input  [63:0] grp_fu_267_p_dout0;
output   grp_fu_267_p_ce;

reg ap_idle;
reg m_axi_gmem0_ARVALID;
reg[63:0] m_axi_gmem0_ARADDR;
reg[31:0] m_axi_gmem0_ARLEN;
reg m_axi_gmem0_RREADY;
reg vp_ce0;
reg vp_we0;
reg e_2_out_ap_vld;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
reg   [0:0] icmp_ln69_reg_744;
reg    ap_block_state5_io;
reg    ap_block_state10_pp0_stage4_iter1;
wire    ap_block_state15_pp0_stage4_iter2;
wire    ap_block_state20_pp0_stage4_iter3;
wire    ap_block_state25_pp0_stage4_iter4;
wire    ap_block_state30_pp0_stage4_iter5;
wire    ap_block_state35_pp0_stage4_iter6;
wire    ap_block_state40_pp0_stage4_iter7;
wire    ap_block_state45_pp0_stage4_iter8;
reg    ap_block_pp0_stage4_subdone;
reg    ap_condition_exit_pp0_iter0_stage4;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [7:0] f_address0;
reg    f_ce0;
wire   [63:0] f_q0;
reg    gmem0_blk_n_AR;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg    gmem0_blk_n_R;
wire    ap_block_pp0_stage4;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
reg    ap_block_state11_pp0_stage0_iter2;
wire    ap_block_state16_pp0_stage0_iter3;
wire    ap_block_state21_pp0_stage0_iter4;
wire    ap_block_state26_pp0_stage0_iter5;
wire    ap_block_state31_pp0_stage0_iter6;
wire    ap_block_state36_pp0_stage0_iter7;
wire    ap_block_state41_pp0_stage0_iter8;
wire    ap_block_state46_pp0_stage0_iter9;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln69_fu_257_p2;
reg   [0:0] icmp_ln69_reg_744_pp0_iter1_reg;
reg   [0:0] icmp_ln69_reg_744_pp0_iter2_reg;
reg   [0:0] icmp_ln69_reg_744_pp0_iter3_reg;
reg   [0:0] icmp_ln69_reg_744_pp0_iter4_reg;
reg   [0:0] icmp_ln69_reg_744_pp0_iter5_reg;
reg   [0:0] icmp_ln69_reg_744_pp0_iter6_reg;
reg   [0:0] icmp_ln69_reg_744_pp0_iter7_reg;
reg   [0:0] icmp_ln69_reg_744_pp0_iter8_reg;
wire   [3:0] select_ln69_1_fu_295_p3;
reg   [3:0] select_ln69_1_reg_748;
wire   [3:0] select_ln69_3_fu_323_p3;
reg   [3:0] select_ln69_3_reg_753;
wire   [63:0] zext_ln75_1_fu_383_p1;
reg   [63:0] zext_ln75_1_reg_759;
reg   [63:0] zext_ln75_1_reg_759_pp0_iter1_reg;
reg   [63:0] zext_ln75_1_reg_759_pp0_iter2_reg;
reg   [63:0] zext_ln75_1_reg_759_pp0_iter3_reg;
reg   [63:0] zext_ln75_1_reg_759_pp0_iter4_reg;
reg   [63:0] zext_ln75_1_reg_759_pp0_iter5_reg;
reg   [63:0] zext_ln75_1_reg_759_pp0_iter6_reg;
reg   [63:0] zext_ln75_1_reg_759_pp0_iter7_reg;
reg   [60:0] trunc_ln5_reg_769;
reg   [63:0] f_load_reg_774;
wire    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_state2_io;
wire    ap_block_state7_pp0_stage1_iter1;
reg    ap_block_state12_pp0_stage1_iter2;
wire    ap_block_state17_pp0_stage1_iter3;
wire    ap_block_state22_pp0_stage1_iter4;
wire    ap_block_state27_pp0_stage1_iter5;
wire    ap_block_state32_pp0_stage1_iter6;
wire    ap_block_state37_pp0_stage1_iter7;
wire    ap_block_state42_pp0_stage1_iter8;
wire    ap_block_state47_pp0_stage1_iter9;
reg    ap_block_pp0_stage1_11001;
reg   [63:0] f_load_reg_774_pp0_iter1_reg;
reg   [63:0] f_load_reg_774_pp0_iter2_reg;
reg   [63:0] f_load_reg_774_pp0_iter3_reg;
reg   [63:0] f_load_reg_774_pp0_iter4_reg;
reg   [63:0] f_load_reg_774_pp0_iter5_reg;
reg   [60:0] trunc_ln6_reg_785;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state9_pp0_stage3_iter1;
reg    ap_block_state14_pp0_stage3_iter2;
wire    ap_block_state19_pp0_stage3_iter3;
wire    ap_block_state24_pp0_stage3_iter4;
wire    ap_block_state29_pp0_stage3_iter5;
wire    ap_block_state34_pp0_stage3_iter6;
wire    ap_block_state39_pp0_stage3_iter7;
wire    ap_block_state44_pp0_stage3_iter8;
reg    ap_block_pp0_stage3_11001;
reg   [3:0] tmp_6_reg_790;
reg    ap_block_pp0_stage4_11001;
reg   [60:0] trunc_ln77_1_reg_801;
reg   [63:0] gmem0_addr_1_read_reg_812;
reg   [63:0] gmem0_addr_1_read_1_reg_817;
reg   [63:0] gmem0_addr_1_read_1_reg_817_pp0_iter3_reg;
reg   [63:0] gmem0_addr_1_read_1_reg_817_pp0_iter4_reg;
reg   [63:0] gmem0_addr_1_read_1_reg_817_pp0_iter5_reg;
reg   [63:0] gmem0_addr_1_read_1_reg_817_pp0_iter6_reg;
reg   [63:0] gmem0_addr_1_read_1_reg_817_pp0_iter7_reg;
reg   [63:0] gmem0_addr_1_read_1_reg_817_pp0_iter8_reg;
reg   [63:0] gmem0_addr_1_read_2_reg_822;
wire   [63:0] bitcast_ln76_fu_559_p1;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state8_pp0_stage2_iter1;
reg    ap_block_state13_pp0_stage2_iter2;
wire    ap_block_state18_pp0_stage2_iter3;
wire    ap_block_state23_pp0_stage2_iter4;
wire    ap_block_state28_pp0_stage2_iter5;
wire    ap_block_state33_pp0_stage2_iter6;
wire    ap_block_state38_pp0_stage2_iter7;
wire    ap_block_state43_pp0_stage2_iter8;
wire    ap_block_state48_pp0_stage2_iter9;
reg    ap_block_pp0_stage2_11001;
wire   [63:0] bitcast_ln76_2_fu_563_p1;
reg   [63:0] gmem0_addr_2_read_reg_837;
reg   [63:0] gmem0_addr_2_read_reg_837_pp0_iter3_reg;
reg   [63:0] gmem0_addr_3_read_reg_842;
reg   [63:0] gmem0_addr_3_read_reg_842_pp0_iter3_reg;
reg   [63:0] gmem0_addr_3_read_reg_842_pp0_iter4_reg;
reg   [63:0] add_reg_847;
wire   [63:0] bitcast_ln77_fu_567_p1;
reg   [63:0] add1_reg_857;
wire   [63:0] bitcast_ln77_1_fu_571_p1;
reg   [63:0] add2_reg_867;
reg   [63:0] sub_reg_872;
reg   [63:0] mul_reg_877;
wire   [63:0] bitcast_ln76_1_fu_575_p1;
reg   [63:0] dc_reg_888;
reg   [63:0] e_load_1_reg_893;
wire   [63:0] d_fu_602_p1;
reg   [63:0] d_reg_900;
wire   [0:0] icmp_ln80_fu_617_p2;
reg   [0:0] icmp_ln80_reg_906;
wire   [0:0] icmp_ln80_1_fu_623_p2;
reg   [0:0] icmp_ln80_1_reg_911;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage2_subdone;
wire  signed [63:0] sext_ln76_fu_435_p1;
wire  signed [63:0] sext_ln77_fu_512_p1;
wire  signed [63:0] sext_ln77_1_fu_549_p1;
reg   [63:0] e_fu_112;
wire   [63:0] e_2_fu_680_p3;
wire    ap_loop_init;
reg   [3:0] iy_fu_116;
wire   [3:0] add_ln77_fu_398_p2;
reg   [3:0] ap_sig_allocacmp_iy_load;
reg   [3:0] phi_ln75_fu_120;
wire   [3:0] add_ln71_fu_404_p2;
reg   [3:0] ap_sig_allocacmp_phi_ln75_load;
reg   [3:0] ix_fu_124;
reg   [3:0] ap_sig_allocacmp_ix_load;
reg   [3:0] phi_ln71_fu_128;
wire   [3:0] select_ln69_2_fu_309_p3;
reg   [3:0] ap_sig_allocacmp_phi_ln71_load;
reg   [7:0] indvar_flatten52_fu_132;
wire   [7:0] add_ln69_fu_263_p2;
reg   [7:0] ap_sig_allocacmp_indvar_flatten52_load;
reg    ap_block_pp0_stage2_01001;
reg   [63:0] grp_fu_211_p0;
reg   [63:0] grp_fu_211_p1;
wire   [63:0] grp_fu_220_p0;
wire   [0:0] icmp_ln71_fu_281_p2;
wire   [3:0] add_ln69_1_fu_303_p2;
wire   [3:0] add_ln69_2_fu_317_p2;
wire   [3:0] select_ln69_fu_287_p3;
wire   [7:0] shl_ln_fu_331_p3;
wire   [7:0] add_ln75_fu_339_p2;
wire   [3:0] tmp_fu_345_p4;
wire   [10:0] shl_ln75_1_fu_355_p4;
wire   [63:0] zext_ln75_fu_365_p1;
wire   [7:0] add_ln75_2_fu_375_p3;
wire   [63:0] add_ln75_1_fu_369_p2;
wire   [7:0] shl_ln77_2_fu_445_p3;
wire   [7:0] add_ln77_1_fu_452_p2;
wire   [3:0] tmp_5_fu_458_p4;
wire   [10:0] shl_ln1_fu_468_p4;
wire   [63:0] zext_ln77_fu_477_p1;
wire   [63:0] add_ln77_2_fu_481_p2;
wire   [7:0] add_ln77_3_fu_496_p2;
wire   [10:0] shl_ln77_1_fu_522_p4;
wire   [63:0] zext_ln77_1_fu_530_p1;
wire   [63:0] add_ln77_4_fu_534_p2;
wire   [63:0] data_fu_583_p1;
wire   [62:0] trunc_ln508_fu_586_p1;
wire   [63:0] t_fu_594_p3;
wire   [10:0] tmp_8_fu_607_p4;
wire   [51:0] trunc_ln80_fu_590_p1;
wire   [63:0] bitcast_ln80_fu_629_p1;
wire   [10:0] tmp_9_fu_632_p4;
wire   [51:0] trunc_ln80_1_fu_642_p1;
wire   [0:0] icmp_ln80_3_fu_656_p2;
wire   [0:0] icmp_ln80_2_fu_650_p2;
wire   [0:0] grp_fu_220_p2;
wire   [0:0] or_ln80_fu_646_p2;
wire   [0:0] and_ln80_fu_668_p2;
wire   [0:0] or_ln80_1_fu_662_p2;
wire   [0:0] and_ln80_1_fu_674_p2;
reg   [1:0] grp_fu_211_opcode;
reg    ap_block_pp0_stage2_00001;
reg    ap_block_pp0_stage3_00001;
reg    ap_block_pp0_stage4_00001;
reg    ap_block_pp0_stage0_00001;
reg    ap_block_pp0_stage1_00001;
reg    grp_fu_211_ce;
reg    grp_fu_215_ce;
reg    grp_fu_220_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter8_stage2;
reg    ap_idle_pp0_0to7;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg   [4:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to9;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage3_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

kernel_kernel_Pipeline_VITIS_LOOP_69_2_VITIS_LOOP_71_3_f_ROM_AUTO_1R #(
    .DataWidth( 64 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
f_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(f_address0),
    .ce0(f_ce0),
    .q0(f_q0)
);

kernel_dcmp_64ns_64ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
dcmp_64ns_64ns_1_2_no_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_220_p0),
    .din1(e_fu_112),
    .ce(grp_fu_220_ce),
    .opcode(5'd2),
    .dout(grp_fu_220_p2)
);

kernel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage4),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter8_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage4)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter9 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to7 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter8_stage2))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to7 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter8_stage2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to7 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter8_stage2))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to7 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter8_stage2))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to7 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter8_stage2))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to7 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter8_stage2))) begin
        ap_loop_exit_ready_pp0_iter6_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to7 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter8_stage2))) begin
        ap_loop_exit_ready_pp0_iter7_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to7 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter8_stage2))) begin
        ap_loop_exit_ready_pp0_iter8_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        e_fu_112 <= 64'd0;
    end else if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        e_fu_112 <= e_2_fu_680_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((icmp_ln69_fu_257_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten52_fu_132 <= add_ln69_fu_263_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten52_fu_132 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((icmp_ln69_fu_257_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            ix_fu_124 <= select_ln69_3_fu_323_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            ix_fu_124 <= 4'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((icmp_ln69_fu_257_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            iy_fu_116 <= add_ln77_fu_398_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            iy_fu_116 <= 4'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((icmp_ln69_fu_257_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            phi_ln71_fu_128 <= select_ln69_2_fu_309_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            phi_ln71_fu_128 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((icmp_ln69_fu_257_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            phi_ln75_fu_120 <= add_ln71_fu_404_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            phi_ln75_fu_120 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        add1_reg_857 <= grp_fu_685_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        add2_reg_867 <= grp_fu_685_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_reg_847 <= grp_fu_685_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        d_reg_900[62 : 0] <= d_fu_602_p1[62 : 0];
        e_load_1_reg_893 <= e_fu_112;
        f_load_reg_774_pp0_iter1_reg <= f_load_reg_774;
        f_load_reg_774_pp0_iter2_reg <= f_load_reg_774_pp0_iter1_reg;
        f_load_reg_774_pp0_iter3_reg <= f_load_reg_774_pp0_iter2_reg;
        f_load_reg_774_pp0_iter4_reg <= f_load_reg_774_pp0_iter3_reg;
        f_load_reg_774_pp0_iter5_reg <= f_load_reg_774_pp0_iter4_reg;
        icmp_ln80_1_reg_911 <= icmp_ln80_1_fu_623_p2;
        icmp_ln80_reg_906 <= icmp_ln80_fu_617_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dc_reg_888 <= grp_fu_685_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln69_reg_744 == 1'd0))) begin
        f_load_reg_774 <= f_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem0_addr_1_read_1_reg_817 <= m_axi_gmem0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem0_addr_1_read_1_reg_817_pp0_iter3_reg <= gmem0_addr_1_read_1_reg_817;
        gmem0_addr_1_read_1_reg_817_pp0_iter4_reg <= gmem0_addr_1_read_1_reg_817_pp0_iter3_reg;
        gmem0_addr_1_read_1_reg_817_pp0_iter5_reg <= gmem0_addr_1_read_1_reg_817_pp0_iter4_reg;
        gmem0_addr_1_read_1_reg_817_pp0_iter6_reg <= gmem0_addr_1_read_1_reg_817_pp0_iter5_reg;
        gmem0_addr_1_read_1_reg_817_pp0_iter7_reg <= gmem0_addr_1_read_1_reg_817_pp0_iter6_reg;
        gmem0_addr_1_read_1_reg_817_pp0_iter8_reg <= gmem0_addr_1_read_1_reg_817_pp0_iter7_reg;
        icmp_ln69_reg_744 <= icmp_ln69_fu_257_p2;
        icmp_ln69_reg_744_pp0_iter1_reg <= icmp_ln69_reg_744;
        icmp_ln69_reg_744_pp0_iter2_reg <= icmp_ln69_reg_744_pp0_iter1_reg;
        icmp_ln69_reg_744_pp0_iter3_reg <= icmp_ln69_reg_744_pp0_iter2_reg;
        icmp_ln69_reg_744_pp0_iter4_reg <= icmp_ln69_reg_744_pp0_iter3_reg;
        icmp_ln69_reg_744_pp0_iter5_reg <= icmp_ln69_reg_744_pp0_iter4_reg;
        icmp_ln69_reg_744_pp0_iter6_reg <= icmp_ln69_reg_744_pp0_iter5_reg;
        icmp_ln69_reg_744_pp0_iter7_reg <= icmp_ln69_reg_744_pp0_iter6_reg;
        icmp_ln69_reg_744_pp0_iter8_reg <= icmp_ln69_reg_744_pp0_iter7_reg;
        zext_ln75_1_reg_759_pp0_iter1_reg[7 : 0] <= zext_ln75_1_reg_759[7 : 0];
        zext_ln75_1_reg_759_pp0_iter2_reg[7 : 0] <= zext_ln75_1_reg_759_pp0_iter1_reg[7 : 0];
        zext_ln75_1_reg_759_pp0_iter3_reg[7 : 0] <= zext_ln75_1_reg_759_pp0_iter2_reg[7 : 0];
        zext_ln75_1_reg_759_pp0_iter4_reg[7 : 0] <= zext_ln75_1_reg_759_pp0_iter3_reg[7 : 0];
        zext_ln75_1_reg_759_pp0_iter5_reg[7 : 0] <= zext_ln75_1_reg_759_pp0_iter4_reg[7 : 0];
        zext_ln75_1_reg_759_pp0_iter6_reg[7 : 0] <= zext_ln75_1_reg_759_pp0_iter5_reg[7 : 0];
        zext_ln75_1_reg_759_pp0_iter7_reg[7 : 0] <= zext_ln75_1_reg_759_pp0_iter6_reg[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        gmem0_addr_1_read_2_reg_822 <= m_axi_gmem0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        gmem0_addr_1_read_reg_812 <= m_axi_gmem0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        gmem0_addr_2_read_reg_837 <= m_axi_gmem0_RDATA;
        gmem0_addr_2_read_reg_837_pp0_iter3_reg <= gmem0_addr_2_read_reg_837;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        gmem0_addr_3_read_reg_842 <= m_axi_gmem0_RDATA;
        gmem0_addr_3_read_reg_842_pp0_iter3_reg <= gmem0_addr_3_read_reg_842;
        gmem0_addr_3_read_reg_842_pp0_iter4_reg <= gmem0_addr_3_read_reg_842_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        mul_reg_877 <= grp_fu_267_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln69_fu_257_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln69_1_reg_748 <= select_ln69_1_fu_295_p3;
        select_ln69_3_reg_753 <= select_ln69_3_fu_323_p3;
        trunc_ln5_reg_769 <= {{add_ln75_1_fu_369_p2[63:3]}};
        zext_ln75_1_reg_759[7 : 0] <= zext_ln75_1_fu_383_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        sub_reg_872 <= grp_fu_685_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln69_reg_744 == 1'd0))) begin
        tmp_6_reg_790 <= {{add_ln77_3_fu_496_p2[7:4]}};
        trunc_ln6_reg_785 <= {{add_ln77_2_fu_481_p2[63:3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln69_reg_744 == 1'd0))) begin
        trunc_ln77_1_reg_801 <= {{add_ln77_4_fu_534_p2[63:3]}};
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone) & (icmp_ln69_reg_744 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage4 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln69_reg_744_pp0_iter8_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
        ap_condition_exit_pp0_iter8_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter8_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter8_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to7 = 1'b1;
    end else begin
        ap_idle_pp0_0to7 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to9 = 1'b1;
    end else begin
        ap_idle_pp0_1to9 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten52_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten52_load = indvar_flatten52_fu_132;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_ix_load = 4'd1;
    end else begin
        ap_sig_allocacmp_ix_load = ix_fu_124;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_iy_load = 4'd1;
    end else begin
        ap_sig_allocacmp_iy_load = iy_fu_116;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_phi_ln71_load = 4'd0;
    end else begin
        ap_sig_allocacmp_phi_ln71_load = phi_ln71_fu_128;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_phi_ln75_load = 4'd0;
    end else begin
        ap_sig_allocacmp_phi_ln75_load = phi_ln75_fu_120;
    end
end

always @ (*) begin
    if (((icmp_ln69_reg_744_pp0_iter8_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        e_2_out_ap_vld = 1'b1;
    end else begin
        e_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        f_ce0 = 1'b1;
    end else begin
        f_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4) & (icmp_ln69_reg_744 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (icmp_ln69_reg_744 == 1'd0)))) begin
        gmem0_blk_n_AR = m_axi_gmem0_ARREADY;
    end else begin
        gmem0_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4)))) begin
        gmem0_blk_n_R = m_axi_gmem0_RVALID;
    end else begin
        gmem0_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        grp_fu_211_ce = 1'b1;
    end else begin
        grp_fu_211_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_00001)) | ((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_00001)))) begin
        grp_fu_211_opcode = 2'd1;
    end else if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_00001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_00001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_00001)))) begin
        grp_fu_211_opcode = 2'd0;
    end else begin
        grp_fu_211_opcode = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_211_p0 = mul_reg_877;
    end else if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_211_p0 = f_load_reg_774_pp0_iter5_reg;
    end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4))) begin
        grp_fu_211_p0 = add1_reg_857;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        grp_fu_211_p0 = add_reg_847;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        grp_fu_211_p0 = bitcast_ln76_2_fu_563_p1;
    end else begin
        grp_fu_211_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_211_p1 = bitcast_ln76_1_fu_575_p1;
    end else if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_211_p1 = add2_reg_867;
    end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4))) begin
        grp_fu_211_p1 = bitcast_ln77_1_fu_571_p1;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        grp_fu_211_p1 = bitcast_ln77_fu_567_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        grp_fu_211_p1 = bitcast_ln76_fu_559_p1;
    end else begin
        grp_fu_211_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        grp_fu_215_ce = 1'b1;
    end else begin
        grp_fu_215_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        grp_fu_220_ce = 1'b1;
    end else begin
        grp_fu_220_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem0_ARADDR = sext_ln77_1_fu_549_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln69_reg_744 == 1'd0))) begin
        m_axi_gmem0_ARADDR = sext_ln77_fu_512_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln69_reg_744 == 1'd0))) begin
        m_axi_gmem0_ARADDR = sext_ln76_fu_435_p1;
    end else begin
        m_axi_gmem0_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln69_reg_744 == 1'd0)))) begin
        m_axi_gmem0_ARLEN = 32'd1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln69_reg_744 == 1'd0))) begin
        m_axi_gmem0_ARLEN = 32'd3;
    end else begin
        m_axi_gmem0_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln69_reg_744 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln69_reg_744 == 1'd0)))) begin
        m_axi_gmem0_ARVALID = 1'b1;
    end else begin
        m_axi_gmem0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)))) begin
        m_axi_gmem0_RREADY = 1'b1;
    end else begin
        m_axi_gmem0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        vp_ce0 = 1'b1;
    end else begin
        vp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        vp_we0 = 1'b1;
    end else begin
        vp_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to9 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if (((ap_idle_pp0_0to7 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter8_stage2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln69_1_fu_303_p2 = (ap_sig_allocacmp_phi_ln71_load + 4'd1);

assign add_ln69_2_fu_317_p2 = (ap_sig_allocacmp_ix_load + 4'd1);

assign add_ln69_fu_263_p2 = (ap_sig_allocacmp_indvar_flatten52_load + 8'd1);

assign add_ln71_fu_404_p2 = (select_ln69_fu_287_p3 + 4'd1);

assign add_ln75_1_fu_369_p2 = (zext_ln75_fu_365_p1 + v);

assign add_ln75_2_fu_375_p3 = {{select_ln69_1_fu_295_p3}, {select_ln69_3_fu_323_p3}};

assign add_ln75_fu_339_p2 = (shl_ln_fu_331_p3 + 8'd16);

assign add_ln77_1_fu_452_p2 = (shl_ln77_2_fu_445_p3 + 8'd16);

assign add_ln77_2_fu_481_p2 = (zext_ln77_fu_477_p1 + v);

assign add_ln77_3_fu_496_p2 = ($signed(shl_ln77_2_fu_445_p3) + $signed(8'd240));

assign add_ln77_4_fu_534_p2 = (zext_ln77_1_fu_530_p1 + v);

assign add_ln77_fu_398_p2 = (select_ln69_1_fu_295_p3 + 4'd1);

assign and_ln80_1_fu_674_p2 = (or_ln80_1_fu_662_p2 & and_ln80_fu_668_p2);

assign and_ln80_fu_668_p2 = (or_ln80_fu_646_p2 & grp_fu_220_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_00001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (m_axi_gmem0_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (m_axi_gmem0_RVALID == 1'b0)) | ((m_axi_gmem0_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & (m_axi_gmem0_RVALID == 1'b0)) | ((m_axi_gmem0_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_00001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (m_axi_gmem0_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (m_axi_gmem0_RVALID == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_io)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & (m_axi_gmem0_RVALID == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_io)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_00001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (m_axi_gmem0_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage2_01001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (m_axi_gmem0_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (m_axi_gmem0_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (m_axi_gmem0_RVALID == 1'b0));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_00001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (m_axi_gmem0_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (m_axi_gmem0_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (m_axi_gmem0_RVALID == 1'b0));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_00001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (m_axi_gmem0_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage4_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (m_axi_gmem0_RVALID == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state5_io)));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (m_axi_gmem0_RVALID == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state5_io)));
end

always @ (*) begin
    ap_block_state10_pp0_stage4_iter1 = (m_axi_gmem0_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state11_pp0_stage0_iter2 = (m_axi_gmem0_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state12_pp0_stage1_iter2 = (m_axi_gmem0_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state13_pp0_stage2_iter2 = (m_axi_gmem0_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state14_pp0_stage3_iter2 = (m_axi_gmem0_RVALID == 1'b0);
end

assign ap_block_state15_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage4_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage3_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage4_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage2_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage3_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = ((m_axi_gmem0_ARREADY == 1'b0) & (icmp_ln69_reg_744 == 1'd0));
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage4_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage2_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage3_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage4_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage1_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage2_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage3_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage4_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage1_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage2_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage3_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage4_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage1_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage2_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((m_axi_gmem0_ARREADY == 1'b0) & (icmp_ln69_reg_744 == 1'd0));
end

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage4;

assign bitcast_ln76_1_fu_575_p1 = gmem0_addr_1_read_1_reg_817_pp0_iter8_reg;

assign bitcast_ln76_2_fu_563_p1 = gmem0_addr_1_read_2_reg_822;

assign bitcast_ln76_fu_559_p1 = gmem0_addr_1_read_reg_812;

assign bitcast_ln77_1_fu_571_p1 = gmem0_addr_3_read_reg_842_pp0_iter4_reg;

assign bitcast_ln77_fu_567_p1 = gmem0_addr_2_read_reg_837_pp0_iter3_reg;

assign bitcast_ln80_fu_629_p1 = e_load_1_reg_893;

assign d_fu_602_p1 = t_fu_594_p3;

assign data_fu_583_p1 = dc_reg_888;

assign e_2_fu_680_p3 = ((and_ln80_1_fu_674_p2[0:0] == 1'b1) ? d_reg_900 : e_load_1_reg_893);

assign e_2_out = e_fu_112;

assign f_address0 = zext_ln75_1_fu_383_p1;

assign grp_fu_220_p0 = t_fu_594_p3;

assign grp_fu_267_p_ce = grp_fu_215_ce;

assign grp_fu_267_p_din0 = sub_reg_872;

assign grp_fu_267_p_din1 = 64'd13821547256400052224;

assign grp_fu_685_p_ce = grp_fu_211_ce;

assign grp_fu_685_p_din0 = grp_fu_211_p0;

assign grp_fu_685_p_din1 = grp_fu_211_p1;

assign grp_fu_685_p_opcode = grp_fu_211_opcode;

assign icmp_ln69_fu_257_p2 = ((ap_sig_allocacmp_indvar_flatten52_load == 8'd196) ? 1'b1 : 1'b0);

assign icmp_ln71_fu_281_p2 = ((ap_sig_allocacmp_iy_load == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln80_1_fu_623_p2 = ((trunc_ln80_fu_590_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln80_2_fu_650_p2 = ((tmp_9_fu_632_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln80_3_fu_656_p2 = ((trunc_ln80_1_fu_642_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln80_fu_617_p2 = ((tmp_8_fu_607_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign m_axi_gmem0_ARBURST = 2'd0;

assign m_axi_gmem0_ARCACHE = 4'd0;

assign m_axi_gmem0_ARID = 1'd0;

assign m_axi_gmem0_ARLOCK = 2'd0;

assign m_axi_gmem0_ARPROT = 3'd0;

assign m_axi_gmem0_ARQOS = 4'd0;

assign m_axi_gmem0_ARREGION = 4'd0;

assign m_axi_gmem0_ARSIZE = 3'd0;

assign m_axi_gmem0_ARUSER = 1'd0;

assign m_axi_gmem0_AWADDR = 64'd0;

assign m_axi_gmem0_AWBURST = 2'd0;

assign m_axi_gmem0_AWCACHE = 4'd0;

assign m_axi_gmem0_AWID = 1'd0;

assign m_axi_gmem0_AWLEN = 32'd0;

assign m_axi_gmem0_AWLOCK = 2'd0;

assign m_axi_gmem0_AWPROT = 3'd0;

assign m_axi_gmem0_AWQOS = 4'd0;

assign m_axi_gmem0_AWREGION = 4'd0;

assign m_axi_gmem0_AWSIZE = 3'd0;

assign m_axi_gmem0_AWUSER = 1'd0;

assign m_axi_gmem0_AWVALID = 1'b0;

assign m_axi_gmem0_BREADY = 1'b0;

assign m_axi_gmem0_WDATA = 64'd0;

assign m_axi_gmem0_WID = 1'd0;

assign m_axi_gmem0_WLAST = 1'b0;

assign m_axi_gmem0_WSTRB = 8'd0;

assign m_axi_gmem0_WUSER = 1'd0;

assign m_axi_gmem0_WVALID = 1'b0;

assign or_ln80_1_fu_662_p2 = (icmp_ln80_3_fu_656_p2 | icmp_ln80_2_fu_650_p2);

assign or_ln80_fu_646_p2 = (icmp_ln80_reg_906 | icmp_ln80_1_reg_911);

assign select_ln69_1_fu_295_p3 = ((icmp_ln71_fu_281_p2[0:0] == 1'b1) ? 4'd1 : ap_sig_allocacmp_iy_load);

assign select_ln69_2_fu_309_p3 = ((icmp_ln71_fu_281_p2[0:0] == 1'b1) ? add_ln69_1_fu_303_p2 : ap_sig_allocacmp_phi_ln71_load);

assign select_ln69_3_fu_323_p3 = ((icmp_ln71_fu_281_p2[0:0] == 1'b1) ? add_ln69_2_fu_317_p2 : ap_sig_allocacmp_ix_load);

assign select_ln69_fu_287_p3 = ((icmp_ln71_fu_281_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_phi_ln75_load);

assign sext_ln76_fu_435_p1 = $signed(trunc_ln5_reg_769);

assign sext_ln77_1_fu_549_p1 = $signed(trunc_ln77_1_reg_801);

assign sext_ln77_fu_512_p1 = $signed(trunc_ln6_reg_785);

assign shl_ln1_fu_468_p4 = {{{tmp_5_fu_458_p4}, {select_ln69_3_reg_753}}, {3'd0}};

assign shl_ln75_1_fu_355_p4 = {{{tmp_fu_345_p4}, {select_ln69_2_fu_309_p3}}, {3'd0}};

assign shl_ln77_1_fu_522_p4 = {{{tmp_6_reg_790}, {select_ln69_3_reg_753}}, {3'd0}};

assign shl_ln77_2_fu_445_p3 = {{select_ln69_1_reg_748}, {4'd0}};

assign shl_ln_fu_331_p3 = {{select_ln69_fu_287_p3}, {4'd0}};

assign t_fu_594_p3 = {{1'd0}, {trunc_ln508_fu_586_p1}};

assign tmp_5_fu_458_p4 = {{add_ln77_1_fu_452_p2[7:4]}};

assign tmp_8_fu_607_p4 = {{data_fu_583_p1[62:52]}};

assign tmp_9_fu_632_p4 = {{bitcast_ln80_fu_629_p1[62:52]}};

assign tmp_fu_345_p4 = {{add_ln75_fu_339_p2[7:4]}};

assign trunc_ln508_fu_586_p1 = data_fu_583_p1[62:0];

assign trunc_ln80_1_fu_642_p1 = bitcast_ln80_fu_629_p1[51:0];

assign trunc_ln80_fu_590_p1 = data_fu_583_p1[51:0];

assign vp_address0 = zext_ln75_1_reg_759_pp0_iter7_reg;

assign vp_d0 = mul_reg_877;

assign zext_ln75_1_fu_383_p1 = add_ln75_2_fu_375_p3;

assign zext_ln75_fu_365_p1 = shl_ln75_1_fu_355_p4;

assign zext_ln77_1_fu_530_p1 = shl_ln77_1_fu_522_p4;

assign zext_ln77_fu_477_p1 = shl_ln1_fu_468_p4;

always @ (posedge ap_clk) begin
    zext_ln75_1_reg_759[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln75_1_reg_759_pp0_iter1_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln75_1_reg_759_pp0_iter2_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln75_1_reg_759_pp0_iter3_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln75_1_reg_759_pp0_iter4_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln75_1_reg_759_pp0_iter5_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln75_1_reg_759_pp0_iter6_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln75_1_reg_759_pp0_iter7_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    d_reg_900[63] <= 1'b0;
end

endmodule //kernel_kernel_Pipeline_VITIS_LOOP_69_2_VITIS_LOOP_71_3
